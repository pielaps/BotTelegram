import asyncio
import logging
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Set, Optional
import re

from telegram import Bot
from telegram.ext import Application

from config import Config
from channel_monitor import ChannelMonitor

logger = logging.getLogger(__name__)

class NewsletterService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏"""
    
    def __init__(self, bot: Bot, channel_monitor: ChannelMonitor):
        self.bot = bot
        self.channel_monitor = channel_monitor
        self.subscribed_users: Set[int] = set()
        self.subscriber_times: Dict[int, int] = {}  # user_id -> —á–∞—Å —Ä–∞—Å—Å—ã–ª–∫–∏ (9-23)
        self.subscribers_file = "newsletter_subscribers.json"
        self.target_tags = [
            "–Ω–∞–ª–æ–≥–∏",
            "–≤–Ω–∂",
            "–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏",
            "–∫–æ–º–ø–ª–∞–µ–Ω—Å",
            "–∏–∑—Ä–∞–∏–ª—å—Å–∫–∏–µ –±–∞–Ω–∫–∏",
            "–±–∞–Ω–∫–∏",
            "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –±–∞–Ω–∫–∏",
            "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
            "–∞–∫—Ç–∏–≤—ã",
            "–∫–∞–ø–∏—Ç–∞–ª",
            "–ø–µ—Ä–µ–≤–æ–¥ –∫–∞–ø–∏—Ç–∞–ª–∞",
            "–æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—á–µ—Ç–∞",
            "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
            "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
            "–±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        ]
        
        # –ö–µ—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.daily_posts_cache: List[Dict] = []
        self.last_scan_date: Optional[str] = None
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
        self.sent_today: Set[int] = set()  # user_id —Ç–µ—Ö, –∫–æ–º—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        self.standard_channels = [
            'moshkovic_law', 
            'movingtoIsrael',
            'gervits_eli',
            'pravo_israel',
            'elinacht',
            'Taxes_Israel',
            'myadvokat_il',
            'novikovalaw',
            'ENRLaw',
            'yadlolim',
            'israel_assistance',
            'ftladvisers'
        ]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.load_subscribers()
    
    def save_subscribers(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscriber_data = {}
            for user_id in self.subscribed_users:
                subscriber_data[str(user_id)] = {
                    "newsletter_time": self.subscriber_times.get(user_id, 12)  # –î–µ—Ñ–æ–ª—Ç 12:00
                }
            
            with open(self.subscribers_file, 'w', encoding='utf-8') as f:
                json.dump(subscriber_data, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {self.subscribers_file}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
    
    def load_subscribers(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.subscribers_file):
                with open(self.subscribers_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ ID)
                if isinstance(data, list):
                    self.subscribed_users = set(data)
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö
                    self.subscriber_times = {user_id: 12 for user_id in self.subscribed_users}
                    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.subscribed_users)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    self.save_subscribers()
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)
                elif isinstance(data, dict):
                    self.subscribed_users = set()
                    self.subscriber_times = {}
                    for user_id_str, settings in data.items():
                        user_id = int(user_id_str)
                        self.subscribed_users.add(user_id)
                        self.subscriber_times[user_id] = settings.get('newsletter_time', 12)
                    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.subscribed_users)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ {self.subscribers_file}")
                    if self.subscribed_users:
                        logger.info(f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {list(self.subscribed_users)}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {self.subscribers_file}")
            else:
                logger.info(f"üìÇ –§–∞–π–ª {self.subscribers_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            self.subscribed_users = set()  # Fallback –∫ –ø—É—Å—Ç–æ–º—É —Å–ø–∏—Å–∫—É
            self.subscriber_times = {}
        
    def subscribe_user(self, user_id: int) -> bool:
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"""
        if user_id not in self.subscribed_users:
            self.subscribed_users.add(user_id)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ (12:00)
            if user_id not in self.subscriber_times:
                self.subscriber_times[user_id] = 12
            self.save_subscribers()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
            return True
        return False
    
    def unsubscribe_user(self, user_id: int) -> bool:
        """–û—Ç–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if user_id in self.subscribed_users:
            self.subscribed_users.remove(user_id)
            # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏
            self.subscriber_times.pop(user_id, None)
            self.save_subscribers()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
            return True
        return False
    
    def is_user_subscribed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"""
        return user_id in self.subscribed_users
    
    def set_user_newsletter_time(self, user_id: int, hour: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (9-20 —á–∞—Å–æ–≤)"""
        if user_id in self.subscribed_users and 9 <= hour <= 20:
            self.subscriber_times[user_id] = hour
            self.save_subscribers()
            logger.info(f"–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour}:00")
            return True
        return False
    
    def get_user_newsletter_time(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.subscriber_times.get(user_id, 12)  # –î–µ—Ñ–æ–ª—Ç 12:00
    
    def get_active_hours(self) -> Set[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"""
        if not self.subscribed_users:
            return set()
        
        active_hours = set()
        for user_id in self.subscribed_users:
            hour = self.get_user_newsletter_time(user_id)
            if 9 <= hour <= 20:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                active_hours.add(hour)
        
        return active_hours
    
    def has_target_tags(self, text: str) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ü–µ–ª–µ–≤—ã–µ —Ç–µ–≥–∏"""
        if not text:
            return None
            
        text_lower = text.lower()
        for tag in self.target_tags:
            if tag in text_lower:
                return tag
        return None
    
    async def scan_channels_for_posts(self) -> List[Dict]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å —Ü–µ–ª–µ–≤—ã–º–∏ —Ç–µ–≥–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        found_posts = []
        yesterday = datetime.now() - timedelta(days=1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await self.channel_monitor.initialize()
        
        for channel_name in self.standard_channels:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
                posts = await self.channel_monitor.get_posts(
                    channels=[channel_name],
                    limit=20,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    start_date=yesterday.date()
                )
                
                if not posts:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —Ç–µ–≥–æ–≤
                for post in posts:
                    if not post.get('text'):
                        continue
                        
                    found_tag = self.has_target_tags(post['text'])
                    if found_tag:
                        found_posts.append({
                            'channel_name': channel_name,
                            'tag': found_tag,
                            'text': post['text'],
                            'date': post.get('date', datetime.now()),
                            'message_id': post.get('id')
                        })
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel_name}: {e}")
                continue
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await self.channel_monitor.close()
        
        return found_posts
    
    async def get_daily_posts(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –∑–∞ –¥–µ–Ω—å (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
        today = datetime.now().strftime('%Y-%m-%d')
        
        # –ï—Å–ª–∏ –∫–µ—à –∞–∫—Ç—É–∞–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if self.last_scan_date == today and self.daily_posts_cache:
            logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: {len(self.daily_posts_cache)} –ø–æ—Å—Ç–æ–≤")
            return self.daily_posts_cache
        
        # –ï—Å–ª–∏ –∫–µ—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –ø—É—Å—Ç, —Å–∫–∞–Ω–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
        logger.info("üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...")
        posts = await self.scan_channels_for_posts()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        self.daily_posts_cache = posts
        self.last_scan_date = today
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—Ä–∏ –Ω–æ–≤–æ–º –¥–Ω–µ
        if self.last_scan_date != today:
            self.sent_today.clear()
        
        logger.info(f"‚úÖ –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ —Å —Ü–µ–ª–µ–≤—ã–º–∏ —Ç–µ–≥–∞–º–∏")
        return posts
    
    async def send_newsletter_to_users(self, posts: List[Dict]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏)"""
        if not posts or not self.subscribed_users:
            logger.info("–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            return
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {len(posts)} –ø–æ—Å—Ç–æ–≤ {len(self.subscribed_users)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
        
        for user_id in self.subscribed_users:
            await self._send_newsletter_to_user(user_id, posts)
    
    async def send_newsletter_to_user_by_time(self, user_id: int, posts: List[Dict]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)"""
        if user_id in self.sent_today:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Ä–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            return
        
        await self._send_newsletter_to_user(user_id, posts)
        self.sent_today.add(user_id)
        logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è")
    
    async def _send_newsletter_to_user(self, user_id: int, posts: List[Dict]):
        """–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_time = self.get_user_newsletter_time(user_id)
            message_text = f"üì¢ **–í–∞—à–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ({user_time:02d}:00):**\n\n"
            
            for post in posts:
                channel_display = f"@{post['channel_name']}" if not post['channel_name'].startswith('@') else post['channel_name']
                message_text += (
                    f"üì∫ **–ö–∞–Ω–∞–ª:** {channel_display}\n"
                    f"üè∑Ô∏è **–¢–µ–≥:** {post['tag']}\n"
                    f"üìù **–ü–æ—Å—Ç:**\n{post['text'][:500]}{'...' if len(post['text']) > 500 else ''}\n"
                    f"{'‚îÄ' * 40}\n\n"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode='Markdown'
            )
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
            await asyncio.sleep(0.5)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            if "bot was blocked by the user" in str(e).lower():
                self.subscribed_users.discard(user_id)
                self.subscriber_times.pop(user_id, None)
                self.save_subscribers()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)")
    
    async def run_daily_scan(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ (–¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(self.subscribed_users)}")
            if self.subscribed_users:
                logger.info(f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {list(self.subscribed_users)}")
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Å—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤...")
            found_posts = await self.scan_channels_for_posts()
            
            if found_posts:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_posts)} –ø–æ—Å—Ç–æ–≤ —Å —Ü–µ–ª–µ–≤—ã–º–∏ —Ç–µ–≥–∞–º–∏")
                for i, post in enumerate(found_posts, 1):
                    logger.info(f"  {i}. –ö–∞–Ω–∞–ª: @{post['channel_name']}, –¢–µ–≥: {post['tag']}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
                await self.send_newsletter_to_users(found_posts)
            else:
                logger.info("‚ÑπÔ∏è –ü–æ—Å—Ç–æ–≤ —Å —Ü–µ–ª–µ–≤—ã–º–∏ —Ç–µ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            logger.error(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
    
    async def force_scan_now(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
        logger.info("‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        await self.run_daily_scan()
    
    async def check_and_send_hourly_newsletters(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"""
        current_hour = datetime.now().hour
        logger.info(f"‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ {current_hour:02d}:00")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã (–∏–∑ –∫–µ—à–∞ –∏–ª–∏ —Å–∫–∞–Ω–∏—Ä—É–µ–º)
        posts = await self.get_daily_posts()
        
        if not posts:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ —ç—Ç–æ—Ç —á–∞—Å
        users_to_send = []
        for user_id in self.subscribed_users:
            user_hour = self.get_user_newsletter_time(user_id)
            if user_hour == current_hour and user_id not in self.sent_today:
                users_to_send.append(user_id)
        
        if not users_to_send:
            logger.info(f"‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {current_hour:02d}:00")
            return
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É {len(users_to_send)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ {current_hour:02d}:00")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user_id in users_to_send:
            await self.send_newsletter_to_user_by_time(user_id, posts)
    
    async def start_daily_scheduler(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —É–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
        logger.info("üß† –ó–∞–ø—É—â–µ–Ω —É–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
        
        while True:
            try:
                current_time = datetime.now()
                current_hour = current_time.hour
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã (—Ç–æ–ª—å–∫–æ —Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
                active_hours = self.get_active_hours()
                
                if not active_hours:
                    logger.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è")
                    # –ñ–¥–µ–º –¥–æ 9:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                    next_check = current_time.replace(hour=9, minute=0, second=0, microsecond=0)
                    if current_hour >= 9:
                        next_check += timedelta(days=1)
                    wait_seconds = (next_check - current_time).total_seconds()
                    logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ {next_check.strftime('%Y-%m-%d %H:%M:%S')}")
                    await asyncio.sleep(wait_seconds)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Å
                if current_hour in active_hours:
                    logger.info(f"üì° –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å {current_hour:02d}:00 - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏")
                    await self.check_and_send_hourly_newsletters()
                else:
                    logger.info(f"‚è∏Ô∏è –ß–∞—Å {current_hour:02d}:00 –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (–Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω)")
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å
                next_active_hour = self._find_next_active_hour(current_time, active_hours)
                wait_seconds = (next_active_hour - current_time).total_seconds()
                
                logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å: {next_active_hour.strftime('%Y-%m-%d %H:%M:%S')}")
                logger.info(f"üïê –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã —Å–µ–≥–æ–¥–Ω—è: {sorted(active_hours)}")
                
                await asyncio.sleep(wait_seconds)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                import traceback
                logger.error(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    def _find_next_active_hour(self, current_time: datetime, active_hours: Set[int]) -> datetime:
        """–ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        current_hour = current_time.hour
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å —Å–µ–≥–æ–¥–Ω—è
        today_active_hours = [h for h in active_hours if h > current_hour and 9 <= h <= 20]
        
        if today_active_hours:
            # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã —Å–µ–≥–æ–¥–Ω—è
            next_hour = min(today_active_hours)
            return current_time.replace(hour=next_hour, minute=0, second=0, microsecond=0)
        else:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è, –∏—â–µ–º –∑–∞–≤—Ç—Ä–∞
            if active_hours:
                next_hour = min(h for h in active_hours if 9 <= h <= 20)
                next_day = current_time + timedelta(days=1)
                return next_day.replace(hour=next_hour, minute=0, second=0, microsecond=0)
            else:
                # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤ –≤–æ–æ–±—â–µ, –∂–¥–µ–º –¥–æ 9:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                next_day = current_time + timedelta(days=1)
                return next_day.replace(hour=9, minute=0, second=0, microsecond=0)