import os
import asyncio
import logging
import re
import threading
from typing import Dict, List, Any
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode

from config import Config
from channel_monitor import ChannelMonitor
from summarizer import PostSummarizer
from newsletter_service import NewsletterService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_STATE = {
    'WAITING_CHANNEL': 'waiting_channel',
    'WAITING_MORE_CHANNELS': 'waiting_more_channels', 
    'WAITING_POST_COUNT': 'waiting_post_count',
    'WAITING_DATE': 'waiting_date',
    'WAITING_KEYWORDS': 'waiting_keywords',
    'WAITING_OUTPUT_FORMAT': 'waiting_output_format',
    'EDITING_STANDARD_LIST': 'editing_standard_list',
    'ADDING_TO_STANDARD': 'adding_to_standard',
    'CHOOSING_FILTER_TYPE': 'choosing_filter_type'
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions: Dict[int, Dict[str, Any]] = {}

class TelegramBot:
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not Config.validate():
            missing_vars = Config.get_missing_vars()
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        
        self.bot_token = Config.BOT_TOKEN
        self.api_id = int(Config.API_ID)
        self.api_hash = Config.API_HASH
        self.phone = Config.PHONE
        
        self.channel_monitor = ChannelMonitor(self.api_id, self.api_hash, self.phone)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä
        self.summarizer = PostSummarizer()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–∫–∏ (–±–æ—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–∑–∂–µ)
        self.newsletter_service = None
        
    def extract_channel_name(self, channel_input: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–≤–æ–¥–∞"""
        channel_input = channel_input.strip()
        
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        if channel_input.startswith('@'):
            return channel_input[1:]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å—Å—ã–ª–∫–∏ t.me
        t_me_match = re.search(r't\.me/([^/?]+)', channel_input)
        if t_me_match:
            return t_me_match.group(1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–∏ https://t.me/
        https_match = re.search(r'https?://t\.me/([^/?]+)', channel_input)
        if https_match:
            return https_match.group(1)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Å—Å—ã–ª–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return channel_input
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏)"""
        user_id = update.effective_user.id
        
        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_sessions:
            del user_sessions[user_id]
            logger.info(f"–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")
        
        await update.message.reply_text("üîÑ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        await self.show_main_menu(update, context)
    
    async def scan_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /scan - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if not self.newsletter_service:
            await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not self.newsletter_service.is_user_subscribed(user_id):
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            return
        
        await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤...")
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            await self.newsletter_service.force_scan_now()
            await update.message.reply_text("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –≤—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
        is_subscribed = False
        if self.newsletter_service:
            is_subscribed = self.newsletter_service.is_user_subscribed(user_id)
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤", callback_data="start_monitoring")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if is_subscribed:
            keyboard.append([InlineKeyboardButton("üì¢ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="unsubscribe_newsletter")])
        else:
            keyboard.append([InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="subscribe_newsletter")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        main_menu_text = (
            "ü§ñ **–ë–æ—Ç –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤**\n\n"
            "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:\n"
            "üìä –ü–æ–ª—É—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤\n"
            "üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
            "üì± –û—Ç—Å–ª–µ–∂–∏—Ç–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n"
            "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏ '—Å–∫–∏–¥–∫–∞' –∏ '–Ω–∞–ª–æ–≥–∏'\n\n"
            "üí° **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:** `/menu` `/scan` `/start` `/manual`\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if update.message:
            await update.message.reply_text(main_menu_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        elif update.callback_query:
            try:
                await update.callback_query.edit_message_text(main_menu_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.callback_query.message.reply_text(main_menu_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def start_monitoring(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_sessions[user_id] = {
            'channels': [],
            'post_count': 10,
            'keywords': '',
            'output_format': 'full',
            'state': USER_STATE['WAITING_CHANNEL']
        }
        
        welcome_message = (
            "üöÄ **–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="standard_list")],
            [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∫–∞–Ω–∞–ª—ã –≤—Ä—É—á–Ω—É—é", callback_data="manual_input")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(welcome_message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await self.show_main_menu(update, context)
    
    async def manual_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manual - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        await self.show_help(update, context)
    
    async def newsletter_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newsletter - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        await self.show_newsletter_settings(update, context)
    
    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
        help_text = (
            "üìñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
            "**–®–∞–≥ 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤**\n"
            "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: `smartgen_israel` –∏–ª–∏ `@telegram`)\n"
            "‚Ä¢ –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥—Ä—è–¥\n\n"
            "**–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤**\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—É—á–∏—Ç—å (–æ—Ç 1 –¥–æ 100)\n\n"
            "**–®–∞–≥ 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)**\n"
            "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\"\n\n"
            "**–®–∞–≥ 4: –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞**\n"
            "‚Ä¢ –ü–æ–ª–Ω—ã–µ –ø–æ—Å—Ç—ã - –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –°–∞–º–º–∞—Ä–∏ - –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò\n\n"
            "**–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª–∞–º:**\n"
            "‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º\n"
            "‚Ä¢ –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n"         
            "‚Ä¢ `@smartgen_israel` - –∫–∞–Ω–∞–ª SMARTGEN\n"
            "‚Ä¢ `@telegram` - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª Telegram"
        )
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(help_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(help_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    def get_standard_channels(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        return [
            'gervits_eli',
            'pravo_israel',
            'Taxes_Israel',
            'yadlolim',
            'israel_assistance'
        ]
    
    async def show_standard_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        standard_channels = self.get_standard_channels()
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è Markdown
        escaped_channels = []
        for ch in standard_channels:
            escaped_ch = ch.replace('_', '\\_')
            escaped_channels.append(f"‚Ä¢ @{escaped_ch}")
        
        message_text = (
            "üìã **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:**\n\n"
            f"{chr(10).join(escaped_channels)}\n\n"
            "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="use_standard_list")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="edit_standard_list")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start_monitoring")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def start_manual_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –∫–∞–Ω–∞–ª–æ–≤ –≤—Ä—É—á–Ω—É—é"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_sessions[user_id] = {
            'channels': [],
            'post_count': 10,
            'keywords': '',
            'output_format': 'full',
            'state': USER_STATE['WAITING_CHANNEL']
        }
        
        message_text = (
            "‚úèÔ∏è **–í–≤–æ–¥ –∫–∞–Ω–∞–ª–æ–≤ –≤—Ä—É—á–Ω—É—é**\n\n"
            "üì¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫—É –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `@smartgen_israel`\n"
            "‚Ä¢ `telegram`\n"
    
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start_monitoring")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def use_standard_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_sessions[user_id] = {
            'channels': self.get_standard_channels().copy(),
            'post_count': 10,
            'keywords': '',
            'output_format': 'full',
            'state': USER_STATE['WAITING_MORE_CHANNELS']
        }
        
        session = user_sessions[user_id]
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª", callback_data="add_more")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è Markdown
        escaped_channels = []
        for ch in session['channels']:
            escaped_ch = ch.replace('_', '\\_')
            escaped_channels.append(f"‚Ä¢ @{escaped_ch}")
        
        message_text = (
            "‚úÖ **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
            f"üì¢ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã ({len(session['channels'])}):\n"
            f"{chr(10).join(escaped_channels)}\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def edit_standard_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if user_id not in user_sessions:
            user_sessions[user_id] = {
                'channels': self.get_standard_channels().copy(),
                'post_count': 10,
                'keywords': '',
                'output_format': 'full',
                'state': USER_STATE['EDITING_STANDARD_LIST']
            }
        
        session = user_sessions[user_id]
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ—Ç, –∑–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏, –Ω–æ –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        if not session.get('channels'):
            session['channels'] = self.get_standard_channels().copy()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        session['state'] = USER_STATE['EDITING_STANDARD_LIST']
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è Markdown
        escaped_channels = []
        for ch in session['channels']:
            escaped_ch = ch.replace('_', '\\_')
            escaped_channels.append(f"‚Ä¢ @{escaped_ch}")
        
        message_text = (
            "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤**\n\n"
            f"üì¢ –¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã ({len(session['channels'])}):\n"
            f"{chr(10).join(escaped_channels)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_to_standard")],
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="remove_from_standard")],
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_editing")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="standard_list")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def add_channel_to_standard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        user_id = update.effective_user.id
        session = user_sessions.get(user_id, {})
        session['state'] = USER_STATE['ADDING_TO_STANDARD']
        
        message_text = (
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞**\n\n"
            "üì¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫—É –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `@smartgen_israel`\n"
            "‚Ä¢ `telegram`\n"
        )
        
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="edit_standard_list")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def remove_channel_from_standard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        user_id = update.effective_user.id
        session = user_sessions.get(user_id, {})
        
        if not session.get('channels'):
            await update.callback_query.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        keyboard = []
        for channel in session['channels']:
            keyboard.append([InlineKeyboardButton(f"‚ûñ @{channel}", callback_data=f"remove_{channel}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="edit_standard_list")])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "‚ûñ **–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        )
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def ask_filter_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        
        session['state'] = USER_STATE['CHOOSING_FILTER_TYPE']
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å—Ç–æ–≤", callback_data="filter_by_count")],
            [InlineKeyboardButton("üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="filter_by_date")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "‚öôÔ∏è **–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏**\n\n"
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã?"
        )
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def ask_post_count(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤"""
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        
        session['state'] = USER_STATE['WAITING_POST_COUNT']
        session['filter_type'] = 'count'
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="continue")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "üìä **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤**\n\n"
            "–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å?\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:"
        )
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def ask_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞"""
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        
        session['state'] = USER_STATE['WAITING_DATE']
        session['filter_type'] = 'date'
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="continue")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "üìÖ **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–π –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã.\n\n"
            "**–§–æ—Ä–º–∞—Ç—ã:**\n"
            "‚Ä¢ `–î–î.–ú–ú.–ì–ì–ì–ì` (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.06.2024)\n"
            "‚Ä¢ `–î–î.–ú–ú` (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)\n"
            "‚Ä¢ `–î–î` (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥)\n\n"
            "–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –ø–æ—Å—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –¥–æ —Å–µ–≥–æ–¥–Ω—è."
        )
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def finish_editing_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        session['state'] = USER_STATE['WAITING_MORE_CHANNELS']
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è Markdown
        escaped_channels = []
        for ch in session['channels']:
            escaped_ch = ch.replace('_', '\\_')
            escaped_channels.append(f"‚Ä¢ @{escaped_ch}")
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª", callback_data="add_more")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "‚úÖ **–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≥–æ—Ç–æ–≤!**\n\n"
            f"üì¢ –ò—Ç–æ–≥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã ({len(session['channels'])}):\n"
            f"{chr(10).join(escaped_channels)}\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º?"
        )
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def add_popular_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if user_id not in user_sessions:
            user_sessions[user_id] = {
                'channels': [],
                'post_count': 10,
                'keywords': '',
                'output_format': 'full',
                'state': USER_STATE['WAITING_CHANNEL']
            }
        
        session = user_sessions[user_id]
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        popular_channels = [
            'gervits_eli',
            'pravo_israel',
            'Taxes_Israel',
            'yadlolim',
            'israel_assistance'
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        for channel in popular_channels:
            if channel not in session['channels']:
                session['channels'].append(channel)
        
        session['state'] = USER_STATE['WAITING_MORE_CHANNELS']
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª", callback_data="add_more")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "üöÄ **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!**\n\n"
            f"üì¢ –¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã ({len(session['channels'])}):\n"
            f"{chr(10).join(['‚Ä¢ @' + ch for ch in session['channels']])}\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        if user_id not in user_sessions:
            await self.show_main_menu(update, context)
            return
        
        session = user_sessions[user_id]
        state = session['state']
        
        if state == USER_STATE['WAITING_CHANNEL']:
            await self.handle_channel_input(update, context, message_text)
            
        elif state == USER_STATE['WAITING_MORE_CHANNELS']:
            await self.handle_additional_channel(update, context, message_text)
            
        elif state == USER_STATE['WAITING_POST_COUNT']:
            await self.handle_post_count(update, context, message_text)
            
        elif state == USER_STATE['WAITING_KEYWORDS']:
            await self.handle_keywords(update, context, message_text)
            
        elif state == USER_STATE['ADDING_TO_STANDARD']:
            await self.handle_add_to_standard(update, context, message_text)
            
        elif state == USER_STATE['WAITING_DATE']:
            await self.handle_date_input(update, context, message_text)
    
    async def handle_channel_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, channel):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞"""
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        channel_name = self.extract_channel_name(channel)
        session['channels'].append(channel_name)
        
        await self.show_channels_menu(update, context)
        session['state'] = USER_STATE['WAITING_MORE_CHANNELS']
    
    async def handle_additional_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE, channel):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        channel_name = self.extract_channel_name(channel)
        session['channels'].append(channel_name)
        
        await self.show_channels_menu(update, context)
    
    async def handle_post_count(self, update: Update, context: ContextTypes.DEFAULT_TYPE, count_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤"""
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        
        try:
            count = int(count_text)
            if count <= 0 or count > 100:
                await update.message.reply_text(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            session['post_count'] = count
            session['state'] = USER_STATE['WAITING_KEYWORDS']
            
            keyboard = [
                [InlineKeyboardButton("üö´ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", callback_data="no_filter")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ {count} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤.\n\n"
                "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å?"
            )
    
    async def handle_keywords(self, update: Update, context: ContextTypes.DEFAULT_TYPE, keywords):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        
        session['keywords'] = keywords.strip()
        await self.ask_output_format(update, context)
    
    async def handle_add_to_standard(self, update: Update, context: ContextTypes.DEFAULT_TYPE, channel_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        channel = self.extract_channel_name(channel_name)
        
        if channel in session['channels']:
            await update.message.reply_text(
                f"‚ùå –ö–∞–Ω–∞–ª @{channel} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!"
            )
            return
        
        session['channels'].append(channel)
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª", callback_data="add_to_standard")],
            [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_editing")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è Markdown
        escaped_channels = []
        for ch in session['channels']:
            escaped_ch = ch.replace('_', '\\_')
            escaped_channels.append(f"‚Ä¢ @{escaped_ch}")
        
        escaped_channel_name = channel.replace('_', '\\_')
        
        await update.message.reply_text(
            f"‚úÖ –ö–∞–Ω–∞–ª @{escaped_channel_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!\n\n"
            f"üì¢ –¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã ({len(session['channels'])}):\n"
            f"{chr(10).join(escaped_channels)}\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª—ã?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def handle_date_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, date_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
        from datetime import datetime, date
        
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
            date_text = date_text.strip()
            today = date.today()
            
            if '.' in date_text:
                parts = date_text.split('.')
                if len(parts) == 3:  # –î–î.–ú–ú.–ì–ì–ì–ì
                    day, month, year = int(parts[0]), int(parts[1]), int(parts[2])
                elif len(parts) == 2:  # –î–î.–ú–ú (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
                    day, month, year = int(parts[0]), int(parts[1]), today.year
                else:
                    raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
            else:  # –î–î (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥)
                day, month, year = int(date_text), today.month, today.year
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã
            start_date = date(year, month, day)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
            if start_date > today:
                await update.message.reply_text(
                    "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–µ—Å—Å–∏–∏
            session['start_date'] = start_date
            session['state'] = USER_STATE['WAITING_KEYWORDS']
            
            keyboard = [
                [InlineKeyboardButton("üö´ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", callback_data="no_filter")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –ë—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –ø–æ—Å—Ç—ã —Å {start_date.strftime('%d.%m.%Y')} –¥–æ —Å–µ–≥–æ–¥–Ω—è.\n\n"
                "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )
            
        except (ValueError, IndexError):
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.06.2024)\n"
                "‚Ä¢ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.06)\n"
                "‚Ä¢ –î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15)\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
    
    async def ask_output_format(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞"""
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        
        session['state'] = USER_STATE['WAITING_OUTPUT_FORMAT']
        
        keyboard = [
            [InlineKeyboardButton("üìÑ –ü–æ–ª–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data="format_full")],
            [InlineKeyboardButton("üìù –°–∞–º–º–∞—Ä–∏", callback_data="format_summary")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        filter_text = f"–§–∏–ª—å—Ç—Ä: {session['keywords']}" if session['keywords'] else "–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
        if session.get('filter_type') == 'date':
            posts_info = f"üìÖ –ü–æ—Å—Ç—ã —Å: {session['start_date'].strftime('%d.%m.%Y')}"
        else:
            posts_info = f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {session['post_count']}"
        
        message_text = (
            f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            f"üì¢ –ö–∞–Ω–∞–ª—ã: {', '.join(['@' + ch for ch in session['channels']])}\n"
            f"{posts_info}\n"
            f"üîç {filter_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –≤—ã–∑–æ–≤ - –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback
        if update.message:
            await update.message.reply_text(message_text, reply_markup=reply_markup)
        else:
            # –ï—Å–ª–∏ –∏–∑ callback, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text,
                reply_markup=reply_markup
            )
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç —Å–µ—Å—Å–∏–∏
        if query.data == "main_menu":
            await self.show_main_menu(update, context)
            return
            
        elif query.data == "start_monitoring":
            await self.start_monitoring(update, context)
            return
            

            
        elif query.data == "standard_list":
            await self.show_standard_list(update, context)
            return
            
        elif query.data == "manual_input":
            await self.start_manual_input(update, context)
            return
            
        elif query.data == "edit_standard_list":
            await self.edit_standard_list(update, context)
            return
            
        elif query.data == "use_standard_list":
            await self.use_standard_list(update, context)
            return
            
        elif query.data == "add_to_standard":
            await self.add_channel_to_standard(update, context)
            return
            
        elif query.data == "remove_from_standard":
            await self.remove_channel_from_standard(update, context)
            return
            
        elif query.data == "finish_editing":
            await self.finish_editing_list(update, context)
            return
            
        elif query.data == "filter_by_count":
            await self.ask_post_count(update, context)
            return
            
        elif query.data == "filter_by_date":
            await self.ask_date(update, context)
            return
        
        elif query.data == "remove_channel_menu":
            await self.show_remove_channel_menu(update, context)
            return
        
        elif query.data == "back_to_channels_menu":
            await self.show_channels_menu(update, context)
            return
        
        elif query.data == "subscribe_newsletter":
            await self.handle_subscribe_newsletter(update, context)
            return
        
        elif query.data == "unsubscribe_newsletter":
            await self.handle_unsubscribe_newsletter(update, context)
            return
        
        elif query.data.startswith("set_time_"):
            await self.handle_set_newsletter_time(update, context)
            return
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏
        if user_id not in user_sessions:
            await self.show_main_menu(update, context)
            return
        
        session = user_sessions[user_id]
        
        if query.data == "add_more":
            session = user_sessions[user_id]
            session['state'] = USER_STATE['WAITING_MORE_CHANNELS']
            await query.edit_message_text(
                "üì¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫—É –∏–ª–∏ @username —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞:"
            )
            
        elif query.data == "continue":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —ç—Ç–æ–º—É —à–∞–≥—É
            if session.get('state') == USER_STATE['CHOOSING_FILTER_TYPE']:
                await self.ask_filter_type(update, context)
            else:
                await self.ask_filter_type(update, context)
            
        elif query.data == "no_filter":
            session['keywords'] = ''
            await query.edit_message_text("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            await self.ask_output_format(update, context)
            
        elif query.data == "format_full":
            session['output_format'] = 'full'
            await query.edit_message_text("‚è≥ –ü–æ–ª—É—á–∞—é –ø–æ—Å—Ç—ã...")
            await self.fetch_and_send_posts(update, context)
            
        elif query.data == "format_summary":
            session['output_format'] = 'summary'
            await query.edit_message_text("‚è≥ –ü–æ–ª—É—á–∞—é –ø–æ—Å—Ç—ã –∏ —Å–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏...")
            await self.fetch_and_send_posts(update, context)
            
        elif query.data.startswith("remove_"):
            channel_to_remove = query.data[7:]
            session = user_sessions.get(user_id, {})
            if channel_to_remove in session.get('channels', []):
                session['channels'].remove(channel_to_remove)
                await query.answer(f"–ö–∞–Ω–∞–ª @{channel_to_remove} —É–¥–∞–ª–µ–Ω!")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤
                await self.show_channels_menu(update, context)
            else:
                await query.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        elif query.data == "restart":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ (—Å—Ç–∞—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            user_sessions[user_id] = {
                'channels': [],
                'post_count': 10,
                'keywords': '',
                'output_format': 'full',
                'state': USER_STATE['WAITING_CHANNEL']
            }
            await query.edit_message_text(
                "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!\n\n"
                "üì¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫—É –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:"
            )
    
    async def fetch_and_send_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤"""
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if self.channel_monitor.client is None:
                await self.channel_monitor.initialize()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ ChannelMonitor
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if session.get('filter_type') == 'date':
                posts = await self.channel_monitor.get_posts(
                    channels=session['channels'],
                    keywords=session['keywords'],
                    start_date=session.get('start_date')
                )
            else:
                posts = await self.channel_monitor.get_posts(
                    channels=session['channels'],
                    limit=session['post_count'],
                    keywords=session['keywords']
                )
            
            if not posts:
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üòî –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞",
                    reply_markup=reply_markup
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
            if session['output_format'] == 'summary':
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
                channels_posts = {}
                for post in posts:
                    channel = post['channel']
                    if channel not in channels_posts:
                        channels_posts[channel] = []
                    channels_posts[channel].append(post)
                
                # –°–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –ø–æ –±–∞—Ç—á–∞–º
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(channels_posts)} –∫–∞–Ω–∞–ª–æ–≤. –°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏ –ø–æ –±–∞—Ç—á–∞–º —Å –ø–æ–º–æ—â—å—é –ò–ò..."
                )
                
                logger.info("–ù–∞—á–∏–Ω–∞–µ–º –±–∞—Ç—á–µ–≤—É—é —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤")
                
                summarizer = PostSummarizer()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö —Å–∞–º–º–∞—Ä–∏
                async def send_batch_summary(channel_name: str, summary: str):
                    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Å–∞–º–º–∞—Ä–∏ –±–∞—Ç—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                    summary_parts = summarizer.split_summary_by_length(summary, 4000)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
                    for i, part in enumerate(summary_parts, 1):
                        if len(summary_parts) > 1:
                            header = f"üìù –°–∞–º–º–∞—Ä–∏ –∫–∞–Ω–∞–ª–∞ @{channel_name} (—á–∞—Å—Ç—å {i}/{len(summary_parts)}):\n\n"
                            message_text = header + part
                        else:
                            message_text = part
                        
                        # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ markdown –ø–∞—Ä—Å–∏–Ω–≥–∞
                        try:
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=message_text,
                                parse_mode='Markdown'
                            )
                        except Exception as parse_error:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ markdown: {parse_error}")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=message_text,
                                parse_mode=None
                            )
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(Config.MESSAGE_DELAY)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ç—á–µ–≤—É—é —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
                await summarizer.summarize_posts_in_batches(
                    posts=posts,
                    keywords=session.get('keywords', ''),
                    batch_size=Config.SUMMARY_BATCH_SIZE,
                    send_callback=send_batch_summary
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚úÖ –í—Å–µ —Å–∞–º–º–∞—Ä–∏ –≥–æ—Ç–æ–≤—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"
                )
            
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –ø–æ—Å—Ç—ã
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üìä –ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤:"
                )
            
                for i, post in enumerate(posts, 1):
                    message_text = (
                        f"üìÑ –ü–æ—Å—Ç {i}/{len(posts)}\n"
                        f"üì¢ –ö–∞–Ω–∞–ª: @{post['channel']}\n"
                        f"üìÖ –î–∞—Ç–∞: {post['date'].strftime('%d.%m.%Y %H:%M')}\n"
                        f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {post.get('views', 'N/A')}\n\n"
                        f"{post['text'][:4000]}{'...' if len(post['text']) > 4000 else ''}"
                    )
                    
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=message_text,
                        parse_mode=ParseMode.HTML,
                        disable_web_page_preview=True
                    )
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(Config.MESSAGE_DELAY)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_monitoring")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_monitoring")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=reply_markup
            )
    
    async def show_remove_channel_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ (—Ä—É—á–Ω–æ–π/—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)"""
        user_id = update.effective_user.id
        session = user_sessions.get(user_id, {})
        if not session.get('channels'):
            await update.callback_query.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç!")
            return
        keyboard = []
        for channel in session['channels']:
            keyboard.append([InlineKeyboardButton(f"‚ûñ @{channel}", callback_data=f"remove_{channel}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_channels_menu")])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_text = (
            "‚ûñ **–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:"
        )
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def show_channels_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å —Ç–µ–∫—É—â–∏–º —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"""
        user_id = update.effective_user.id
        session = user_sessions[user_id]
        escaped_channels = []
        for ch in session['channels']:
            escaped_ch = ch.replace('_', '\\_')
            escaped_channels.append(f"‚Ä¢ @{escaped_ch}")
        message_text = (
            "üì¢ **–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:**\n\n"
            f"{chr(10).join(escaped_channels)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞–Ω–∞–ª", callback_data="add_more")],
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="remove_channel_menu")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
            except Exception:
                await update.callback_query.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

    async def handle_subscribe_newsletter(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"""
        user_id = update.effective_user.id
        
        if not self.newsletter_service:
            await update.callback_query.answer("‚ùå –°–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if self.newsletter_service.subscribe_user(user_id):
            await update.callback_query.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.show_main_menu(update, context)
        else:
            await update.callback_query.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
    
    async def handle_unsubscribe_newsletter(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if not self.newsletter_service:
            await update.callback_query.answer("‚ùå –°–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if self.newsletter_service.unsubscribe_user(user_id):
            await update.callback_query.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.show_main_menu(update, context)
        else:
            await update.callback_query.answer("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
    
    async def show_newsletter_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        
        if not self.newsletter_service:
            await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if not self.newsletter_service.is_user_subscribed(user_id):
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (/menu)"
            )
            return
        
        current_time = self.newsletter_service.get_user_newsletter_time(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ (9-20 —á–∞—Å–æ–≤)
        keyboard = []
        for hour in range(9, 21):
            if hour == current_time:
                button_text = f"‚úÖ {hour:02d}:00"
            else:
                button_text = f"{hour:02d}:00"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"set_time_{hour}")])
        
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            f"‚è∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
            f"üìç –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: **{current_time:02d}:00** (–∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è)\n\n"
            f"üïê –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É:\n"
            f"(–¥–æ—Å—Ç—É–ø–Ω—ã —á–∞—Å—ã —Å 09:00 –¥–æ 20:00)"
        )
        
        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def handle_set_newsletter_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        query = update.callback_query
        
        if not self.newsletter_service:
            await query.answer("‚ùå –°–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å –∏–∑ callback_data
        try:
            hour = int(query.data.split("_")[2])
        except (IndexError, ValueError):
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏")
            return
        
        if self.newsletter_service.set_user_newsletter_time(user_id, hour):
            await query.answer(f"‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:00!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            await self.show_newsletter_settings_update(update, context)
        else:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
    
    async def show_newsletter_settings_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user_id = update.effective_user.id
        current_time = self.newsletter_service.get_user_newsletter_time(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ (9-20 —á–∞—Å–æ–≤)
        keyboard = []
        for hour in range(9, 21):
            if hour == current_time:
                button_text = f"‚úÖ {hour:02d}:00"
            else:
                button_text = f"{hour:02d}:00"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"set_time_{hour}")])
        
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            f"‚è∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
            f"üìç –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: **{current_time:02d}:00** (–∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–µ –≤—Ä–µ–º—è)\n\n"
            f"üïê –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É:\n"
            f"(–¥–æ—Å—Ç—É–ø–Ω—ã —á–∞—Å—ã —Å 09:00 –¥–æ 20:00)"
        )
        
        try:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.callback_query.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = Application.builder().token(self.bot_token).build()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–∫–∏
            self.newsletter_service = NewsletterService(application.bot, self.channel_monitor)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
            async def setup_bot_commands():
                commands = [
                    BotCommand("menu", "üè† –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                    BotCommand("scan", "üì° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"),
                    BotCommand("newsletter", "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"),
                    BotCommand("start", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (–æ—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é)"),
                    BotCommand("manual", "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
                ]
                await application.bot.set_my_commands(commands)
                logger.info("üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            application.job_queue.run_once(
                lambda context: asyncio.create_task(setup_bot_commands()),
                when=0.5  # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("menu", self.menu_command))
            application.add_handler(CommandHandler("scan", self.scan_command))
            application.add_handler(CommandHandler("newsletter", self.newsletter_command))
            application.add_handler(CommandHandler("manual", self.manual_command))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            application.add_handler(CallbackQueryHandler(self.handle_callback_query))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ç–æ–º –∂–µ event loop
            async def start_scheduler_with_app():
                await self.newsletter_service.start_daily_scheduler()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ event loop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            application.job_queue.run_once(
                lambda context: asyncio.create_task(start_scheduler_with_app()),
                when=1  # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logger.info("üì¢ –°–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            application.run_polling()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = TelegramBot()
        bot.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ .env")

if __name__ == "__main__":
    main() 