#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
"""

import asyncio
import logging
from datetime import datetime, timedelta
from newsletter_service import NewsletterService
from config import Config
from channel_monitor import ChannelMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def quick_scan_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not Config.validate():
            missing_vars = Config.get_missing_vars()
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockBot:
            async def send_message(self, chat_id, text, parse_mode=None):
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                logger.info(f"üìù –¢–µ–∫—Å—Ç: {text[:200]}...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        channel_monitor = ChannelMonitor(
            int(Config.API_ID), 
            Config.API_HASH, 
            Config.PHONE
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        await channel_monitor.initialize()
        
        mock_bot = MockBot()
        newsletter_service = NewsletterService(mock_bot, channel_monitor)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 123456789
        newsletter_service.subscribe_user(test_user_id)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_user_id} –ø–æ–¥–ø–∏—Å–∞–Ω")
        
        # –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤...")
        start_time = datetime.now()
        
        found_posts = await newsletter_service.scan_channels_for_posts()
        
        end_time = datetime.now()
        scan_duration = (end_time - start_time).total_seconds()
        
        logger.info(f"‚è±Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {scan_duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        if found_posts:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_posts)} –ø–æ—Å—Ç–æ–≤ —Å —Ü–µ–ª–µ–≤—ã–º–∏ —Ç–µ–≥–∞–º–∏:")
            for i, post in enumerate(found_posts, 1):
                logger.info(f"  {i}. –ö–∞–Ω–∞–ª: @{post['channel_name']}, –¢–µ–≥: {post['tag']}")
                logger.info(f"     –¢–µ–∫—Å—Ç: {post['text'][:100]}...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
            logger.info("üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏...")
            await newsletter_service.send_newsletter_to_users(found_posts)
        else:
            logger.info("‚ÑπÔ∏è –ü–æ—Å—Ç–æ–≤ —Å —Ü–µ–ª–µ–≤—ã–º–∏ —Ç–µ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await channel_monitor.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(quick_scan_test()) 