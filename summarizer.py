import asyncio
import logging
from typing import List, Dict, Any, Callable, Optional
from openai import OpenAI
from config import Config

logger = logging.getLogger(__name__)

class PostSummarizer:
    def __init__(self):
        self.client = OpenAI(api_key=Config.OPENAI_API_KEY)
        self.model = Config.OPENAI_MODEL
    
    async def summarize_posts(self, posts: List[Dict[str, Any]], keywords: str = '') -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞–Ω–∞–ª–∞–º
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        """
        try:
            if not posts:
                return "‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏."
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è OpenAI
            posts_text = self._prepare_all_posts_text(posts)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            prompt = self._create_structured_prompt(posts_text, keywords, len(posts))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(posts)} –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –≤ OpenAI")
            
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model=self.model,
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≥—Ä—É–ø–ø–∏—Ä—É—è –ø–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏–ª–∏ –∫—É—Ä—Å–∏–≤."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=4000,
                temperature=0.3
            )
            
            summary = response.choices[0].message.content.strip()
            logger.info("–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            return summary
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏: {str(e)}"
    
    def _prepare_all_posts_text(self, posts: List[Dict[str, Any]]) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º
        channels_posts = {}
        for post in posts:
            channel = post['channel']
            if channel not in channels_posts:
                channels_posts[channel] = []
            channels_posts[channel].append(post)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        sorted_channels = sorted(channels_posts.keys())
        
        prepared_text = []
        for channel in sorted_channels:
            channel_posts = channels_posts[channel]
            prepared_text.append(f"üì¢ –ö–ê–ù–ê–õ: @{channel}")
            prepared_text.append("=" * 50)
            
            for i, post in enumerate(channel_posts, 1):
                date_str = post['date'].strftime('%d.%m.%Y %H:%M')
                text = post['text'][:3000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
                
                post_text = f"–ü–û–°–¢ {i}:\n–î–∞—Ç–∞: {date_str}\n–¢–µ–∫—Å—Ç: {text}\n"
                prepared_text.append(post_text)
            
            prepared_text.append("\n" + "=" * 50 + "\n")
        
        return "\n".join(prepared_text)
    
    def _create_structured_prompt(self, posts_text: str, keywords: str, posts_count: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        keywords_info = f"\n–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {keywords}" if keywords else ""
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π {posts_count} –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.{keywords_info}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–ê–ú–ú–ê–†–ò:
1. –ì—Ä—É–ø–ø–∏—Ä—É–π —Å–∞–º–º–∞—Ä–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º, —É–∫–∞–∑—ã–≤–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –±–ª–æ–∫–æ–º
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ —Å–æ–∑–¥–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
3. –í–∫–ª—é—á–∏ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, —Ü–∏—Ñ—Ä—ã, —Å—Å—ã–ª–∫–∏, –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
4. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ª–æ–≥–∏–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
5. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏–ª–∏ –∫—É—Ä—Å–∏–≤
6. –ù–µ –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
7. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Å—Å—ã–ª–∫–∏, –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –¥–∞—Ç—ã, –≤—Ä–µ–º—è, –∏ —Ç.–¥.
8. –î–µ–ª–∞–π —Å–∞–º–º–∞—Ä–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º, –º–∏–Ω–∏–º—É–º 40% –æ—Ç –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–æ–≤.
9. –£ —Ç–µ–±—è –Ω–µ—Ç –ª–∏–º–∏—Ç–∞ —Å–ª–æ–≤, —Ç—ã –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ.

–§–û–†–ú–ê–¢ –í–´–í–û–î–ê:
üì¢ –ö–∞–Ω–∞–ª: @channel_name
üìÑ –ü–æ—Å—Ç 1: [–ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏]
üìÑ –ü–æ—Å—Ç 2: [–ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏]
...

üì¢ –ö–∞–Ω–∞–ª: @another_channel
üìÑ –ü–æ—Å—Ç 1: [–ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏]
...

–ü–û–°–¢–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{posts_text}

–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏:"""
        
        return prompt
    
    def split_summary_by_length(self, summary: str, max_length: int = 4000) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –¥–ª–∏–Ω–µ, –Ω–µ –æ–±—Ä–µ–∑–∞—è —Å–ª–æ–≤–∞"""
        if len(summary) <= max_length:
            return [summary]
        
        parts = []
        current_part = ""
        lines = summary.split('\n')
        
        for line in lines:
            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
            if len(current_part) + len(line) + 1 > max_length and current_part:
                parts.append(current_part.strip())
                current_part = line
            else:
                if current_part:
                    current_part += '\n' + line
                else:
                    current_part = line
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part:
            parts.append(current_part.strip())
        
        return parts

    async def summarize_posts_in_batches(
        self, 
        posts: List[Dict[str, Any]], 
        keywords: str = '',
        batch_size: int = 10,
        send_callback: Optional[Callable[[str, str], Any]] = None
    ) -> List[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ –±–∞—Ç—á–∞–º, –≥–¥–µ –∫–∞–∂–¥—ã–π –±–∞—Ç—á —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞.
        –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI.
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
            batch_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –±–∞—Ç—á–µ
            send_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤–æ–≥–æ —Å–∞–º–º–∞—Ä–∏ (channel_name, summary)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∞–º–º–∞—Ä–∏
        """
        try:
            if not posts:
                return ["‚ùå –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏."]
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞–Ω–∞–ª–∞–º
            channels_posts = {}
            for post in posts:
                channel = post['channel']
                if channel not in channels_posts:
                    channels_posts[channel] = []
                channels_posts[channel].append(post)
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(channels_posts)} –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –±–∞—Ç—á–∞–º")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            semaphore = asyncio.Semaphore(Config.MAX_CONCURRENT_REQUESTS)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            channel_buffers = {}  # –ë—É—Ñ–µ—Ä—ã –≥–æ—Ç–æ–≤—ã—Ö —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel_next_batch = {}  # –°–ª–µ–¥—É—é—â–∏–π –æ–∂–∏–¥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel_total_batches = {}  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel_locks = {}  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–∞—Ç—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            all_batch_tasks = []
            
            for channel_name, channel_posts in channels_posts.items():
                logger.info(f"–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ç—á–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{channel_name} ({len(channel_posts)} –ø–æ—Å—Ç–æ–≤)")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞ –Ω–∞ –±–∞—Ç—á–∏
                batches = [
                    channel_posts[i:i + batch_size] 
                    for i in range(0, len(channel_posts), batch_size)
                ]
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞
                channel_buffers[channel_name] = {}
                channel_next_batch[channel_name] = 1
                channel_total_batches[channel_name] = len(batches)
                channel_locks[channel_name] = asyncio.Lock()
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
                for batch_idx, batch_posts in enumerate(batches, 1):
                    task = self._process_batch_with_ordered_sending(
                        semaphore=semaphore,
                        batch_posts=batch_posts,
                        channel_name=channel_name,
                        keywords=keywords,
                        batch_idx=batch_idx,
                        total_batches=len(batches),
                        send_callback=send_callback,
                        channel_buffers=channel_buffers,
                        channel_next_batch=channel_next_batch,
                        channel_total_batches=channel_total_batches,
                        channel_locks=channel_locks
                    )
                    all_batch_tasks.append(task)
            
            logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(all_batch_tasks)} –±–∞—Ç—á–µ–π (–º–∞–∫—Å. {Config.MAX_CONCURRENT_REQUESTS} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–µ–º–∞—Ñ–æ—Ä–∞
            results = await asyncio.gather(*all_batch_tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_summaries = []
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {i+1}: {result}")
                    all_summaries.append(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {i+1}: {str(result)}")
                elif result:
                    all_summaries.append(result)
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ {len(all_summaries)} —Å–∞–º–º–∞—Ä–∏")
            return all_summaries
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –±–∞—Ç—á–∞–º: {e}")
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏: {str(e)}"
            return [error_msg]
    
    async def _process_batch_with_ordered_sending(
        self,
        semaphore: asyncio.Semaphore,
        batch_posts: List[Dict[str, Any]],
        channel_name: str,
        keywords: str,
        batch_idx: int,
        total_batches: int,
        send_callback: Optional[Callable[[str, str], Any]],
        channel_buffers: Dict[str, Dict[int, str]],
        channel_next_batch: Dict[str, int],
        channel_total_batches: Dict[str, int],
        channel_locks: Dict[str, asyncio.Lock]
    ) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á —Å —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Args:
            semaphore: –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            batch_posts: –ü–æ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            channel_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            batch_idx: –ù–æ–º–µ—Ä –±–∞—Ç—á–∞
            total_batches: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –¥–ª—è –∫–∞–Ω–∞–ª–∞
            send_callback: –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            channel_buffers: –ë—É—Ñ–µ—Ä—ã –≥–æ—Ç–æ–≤—ã—Ö —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel_next_batch: –°–ª–µ–¥—É—é—â–∏–π –æ–∂–∏–¥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel_total_batches: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channel_locks: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            
        Returns:
            –°–∞–º–º–∞—Ä–∏ –±–∞—Ç—á–∞
        """
        async with semaphore:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞ {batch_idx}/{total_batches} –∫–∞–Ω–∞–ª–∞ @{channel_name} ({len(batch_posts)} –ø–æ—Å—Ç–æ–≤)")
            
            try:
                # –°–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –±–∞—Ç—á–∞
                batch_summary = await self._summarize_batch(
                    batch_posts, 
                    channel_name, 
                    keywords,
                    batch_idx,
                    total_batches
                )
                
                if batch_summary and send_callback:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –±—É—Ñ–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await self._buffer_and_send_ordered(
                        channel_name=channel_name,
                        batch_idx=batch_idx,
                        batch_summary=batch_summary,
                        send_callback=send_callback,
                        channel_buffers=channel_buffers,
                        channel_next_batch=channel_next_batch,
                        channel_total_batches=channel_total_batches,
                        channel_locks=channel_locks
                    )
                
                return batch_summary
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞ {batch_idx} –∫–∞–Ω–∞–ª–∞ @{channel_name}: {e}")
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞ {batch_idx} –∫–∞–Ω–∞–ª–∞ @{channel_name}: {str(e)}"
    
    async def _buffer_and_send_ordered(
        self,
        channel_name: str,
        batch_idx: int,
        batch_summary: str,
        send_callback: Callable[[str, str], Any],
        channel_buffers: Dict[str, Dict[int, str]],
        channel_next_batch: Dict[str, int],
        channel_total_batches: Dict[str, int],
        channel_locks: Dict[str, asyncio.Lock]
    ):
        """
        –ë—É—Ñ–µ—Ä–∏–∑—É–µ—Ç —Å–∞–º–º–∞—Ä–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        
        Args:
            channel_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            batch_idx: –ù–æ–º–µ—Ä –±–∞—Ç—á–∞
            batch_summary: –ì–æ—Ç–æ–≤—ã–π —Å–∞–º–º–∞—Ä–∏
            send_callback: –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            channel_buffers: –ë—É—Ñ–µ—Ä—ã –≥–æ—Ç–æ–≤—ã—Ö —Å–∞–º–º–∞—Ä–∏
            channel_next_batch: –°–ª–µ–¥—É—é—â–∏–π –æ–∂–∏–¥–∞–µ–º—ã–π –Ω–æ–º–µ—Ä –±–∞—Ç—á–∞
            channel_total_batches: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
            channel_locks: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        async with channel_locks[channel_name]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –±—É—Ñ–µ—Ä
            channel_buffers[channel_name][batch_idx] = batch_summary
            logger.info(f"–°–∞–º–º–∞—Ä–∏ –±–∞—Ç—á–∞ {batch_idx} –∫–∞–Ω–∞–ª–∞ @{channel_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±—É—Ñ–µ—Ä")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –±–∞—Ç—á–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
            while (channel_next_batch[channel_name] in channel_buffers[channel_name] and
                   channel_next_batch[channel_name] <= channel_total_batches[channel_name]):
                
                current_batch = channel_next_batch[channel_name]
                summary_to_send = channel_buffers[channel_name][current_batch]
                
                try:
                    await send_callback(channel_name, summary_to_send)
                    logger.info(f"–°–∞–º–º–∞—Ä–∏ –±–∞—Ç—á–∞ {current_batch}/{channel_total_batches[channel_name]} –∫–∞–Ω–∞–ª–∞ @{channel_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    
                    # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∞–º–º–∞—Ä–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞
                    del channel_buffers[channel_name][current_batch]
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–∞—Ç—á—É
                    channel_next_batch[channel_name] += 1
                    
                except Exception as callback_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∞–º–º–∞—Ä–∏ –±–∞—Ç—á–∞ {current_batch} –∫–∞–Ω–∞–ª–∞ @{channel_name}: {callback_error}")
                    break
    
    async def _summarize_batch(
        self, 
        batch_posts: List[Dict[str, Any]], 
        channel_name: str, 
        keywords: str,
        batch_number: int,
        total_batches: int
    ) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        
        Args:
            batch_posts: –ü–æ—Å—Ç—ã –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º –±–∞—Ç—á–µ
            channel_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            batch_number: –ù–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
            total_batches: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            
        Returns:
            –°–∞–º–º–∞—Ä–∏ –±–∞—Ç—á–∞
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–æ–≤ –±–∞—Ç—á–∞
            posts_text = self._prepare_batch_posts_text(batch_posts, channel_name)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –±–∞—Ç—á–∞
            prompt = self._create_batch_prompt(
                posts_text, 
                keywords, 
                len(batch_posts),
                channel_name,
                batch_number,
                total_batches
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á {batch_number} –∫–∞–Ω–∞–ª–∞ @{channel_name} ({len(batch_posts)} –ø–æ—Å—Ç–æ–≤) –Ω–∞ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –≤ OpenAI")
            
            response = await asyncio.to_thread(
                self.client.chat.completions.create,
                model=self.model,
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –±–∞—Ç—á–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏–ª–∏ –∫—É—Ä—Å–∏–≤."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=4000,
                temperature=0.3
            )
            
            summary = response.choices[0].message.content.strip()
            logger.info(f"–°–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –±–∞—Ç—á–∞ {batch_number} –∫–∞–Ω–∞–ª–∞ @{channel_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            return summary
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –±–∞—Ç—á–∞ {batch_number} –∫–∞–Ω–∞–ª–∞ @{channel_name}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏ –±–∞—Ç—á–∞ {batch_number} –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{channel_name}: {str(e)}"
    
    def _prepare_batch_posts_text(self, batch_posts: List[Dict[str, Any]], channel_name: str) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–æ–≤ –±–∞—Ç—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI"""
        prepared_text = [f"üì¢ –ö–ê–ù–ê–õ: @{channel_name}"]
        prepared_text.append("=" * 50)
        
        for i, post in enumerate(batch_posts, 1):
            date_str = post['date'].strftime('%d.%m.%Y %H:%M')
            text = post['text'][:3000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
            
            post_text = f"–ü–û–°–¢ {i}:\n–î–∞—Ç–∞: {date_str}\n–¢–µ–∫—Å—Ç: {text}\n"
            prepared_text.append(post_text)
        
        prepared_text.append("=" * 50)
        
        return "\n".join(prepared_text)
    
    def _create_batch_prompt(
        self, 
        posts_text: str, 
        keywords: str, 
        posts_count: int,
        channel_name: str,
        batch_number: int,
        total_batches: int
    ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –±–∞—Ç—á–∞"""
        keywords_info = f"\n–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {keywords}" if keywords else ""
        
        batch_info = ""
        if total_batches > 1:
            batch_info = f"\n–≠—Ç–æ –±–∞—Ç—á {batch_number} –∏–∑ {total_batches} –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{channel_name}."
        
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π {posts_count} –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞ @{channel_name} –∏ —Å–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.{keywords_info}{batch_info}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–ê–ú–ú–ê–†–ò:
1. –°–æ–∑–¥–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞ –∏ –Ω–æ–º–µ—Ä–∞ –±–∞—Ç—á–∞ (–µ—Å–ª–∏ –±–∞—Ç—á–µ–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ —Å–æ–∑–¥–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
3. –í–∫–ª—é—á–∏ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, —Ü–∏—Ñ—Ä—ã, —Å—Å—ã–ª–∫–∏, –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
4. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ª–æ–≥–∏–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
5. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –∏–ª–∏ –∫—É—Ä—Å–∏–≤
6. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
7. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Å—Å—ã–ª–∫–∏, –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –¥–∞—Ç—ã, –≤—Ä–µ–º—è, –∏ —Ç.–¥.
8. –î–µ–ª–∞–π —Å–∞–º–º–∞—Ä–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º, –º–∏–Ω–∏–º—É–º 40% –æ—Ç –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–æ–≤.
9. –£ —Ç–µ–±—è –Ω–µ—Ç –ª–∏–º–∏—Ç–∞ —Å–ª–æ–≤, —Ç—ã –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ.

–§–û–†–ú–ê–¢ –í–´–í–û–î–ê:
üì¢ –ö–∞–Ω–∞–ª: @{channel_name}{' (–±–∞—Ç—á ' + str(batch_number) + '/' + str(total_batches) + ')' if total_batches > 1 else ''}

üìÑ –ü–æ—Å—Ç 1: [–ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏]
üìÑ –ü–æ—Å—Ç 2: [–ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏]
...

–ü–û–°–¢–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{posts_text}

–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏:"""
        
        return prompt 